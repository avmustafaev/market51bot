import asyncio
import contextlib
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from app.loadenv import envi
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from app.avito_parser import AvitoParser

CHANNEL_ID = envi.chid

bot = Bot(
    token=envi.token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode –∑–¥–µ—Å—å
)
dp = Dispatcher()

class Form(StatesGroup):
    address = State()
    district = State()
    property_type = State()
    price = State()
    floor = State()
    area = State()
    rooms = State()
    name = State()
    phone = State()
    
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /avito
class AvitoState(StatesGroup):
    url = State()  # –®–∞–≥ 1: –í–≤–æ–¥ —Å—Å—ã–ª–∫–∏
    name = State()  # –®–∞–≥ 2: –í–≤–æ–¥ –∏–º–µ–Ω–∏
    phone = State()  # –®–∞–≥ 3: –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


def get_final_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—à–∏–±–æ–∫ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send_to_channel")],
        [InlineKeyboardButton(text="üîÑ –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ])

districts = [
    "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π", "–ë–æ—Ç–∞–Ω–∏–∫–∞", "–í–ò–ó", "–í—Ç–æ—Ä—á–µ—Ä–º–µ—Ç", "–í—Ç—É–∑ –≥–æ—Ä–æ–¥–æ–∫", 
    "–ï–ª–∏–∑–∞–≤–µ—Ç", "–ñ–ë–ò", "–ó–∞–≤–æ–∫–∑–∞–ª—å–Ω—ã–π", "–ó–∞—Ä–µ—á–Ω—ã–π", "–ü–∏–æ–Ω–µ—Ä—Å–∫–∏–π", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", 
    "–£—Ä–∞–ª–º–∞—à", "–£—Ç–∫—É—Å", "–•–∏–º–º–∞—à", "–¶–µ–Ω—Ç—Ä", "–®–∞—Ä—Ç–∞—à", "–®–∏—Ä–æ–∫–∞—è —Ä–µ—á–∫–∞", "–≠–ª—å–º–∞—à", "–Æ–≥–æ –∑–∞–ø–∞–¥"
]

property_types = ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–°—Ç—É–¥–∏—è", "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã", "–î–æ–º", "–ö–æ–º–Ω–∞—Ç–∞", "–û–±—â–µ–∂–∏—Ç–∏–µ"]

def get_inline_keyboard(options, callback_prefix):
    keyboard = []
    row = []
    
    for option in options:
        row.append(InlineKeyboardButton(text=option, callback_data=f"{callback_prefix}:{option}"))
        
        if len(row) == 2:  # –ü–æ—Å–ª–µ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, –Ω–∞–∂–º–∏—Ç–µ –ú–ï–ù–Æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É'.")

@dp.message(Command("new"))
async def new_command(message: types.Message, state: FSMContext):
    await state.clear()
    sent_message = await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.update_data(messages=[sent_message.message_id, message.message_id])
    await state.set_state(Form.address)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /avito
@dp.message(Command("avito"))
async def avito_command(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito:")
    await state.set_state(AvitoState.url)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@dp.message(AvitoState.url)
async def get_avito_url(message: types.Message, state: FSMContext):
    url = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if not url.startswith(("https://www.avito.ru/", "http://www.avito.ru/")):
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞

    await state.update_data(url=url)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    try:
        parser = AvitoParser()
        parsed_data = f'{parser.parse(url)}<a href="{url}">üîó –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>'
        await state.update_data(parsed_data=parsed_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await message.answer(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n{parsed_data}", disable_web_page_preview=True)
        await message.answer("üòé –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:")
        await state.set_state(AvitoState.name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(AvitoState.name)
async def get_avito_name(message: types.Message, state: FSMContext):
    name = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
    await state.update_data(name=name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:")
    await state.set_state(AvitoState.phone)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
@dp.message(AvitoState.phone)
async def get_avito_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
    if message.from_user.username:
        user_link = f'<a href="https://t.me/{message.from_user.username}">üîó {message.from_user.username}</a>'
    else:
        user_link = f'<a href="tg://user?id={message.from_user.id}">üîó {message.from_user.id}</a>'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = (
        f"{data.get('parsed_data', '')}"
        f"\nüòé –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        f"<span class='tg-spoiler'>{user_link}</span>"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, result, parse_mode="HTML", disable_web_page_preview=True)
    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ    


@dp.callback_query(F.data == "restart")
async def restart_form(callback: CallbackQuery, state: FSMContext):
    await new_command(callback.message, state)

async def process_step(message: types.Message, state: FSMContext, next_state: State, prompt: str, key: str):
    data = await state.get_data()
    messages = data.get("messages", [])

    await state.update_data({key: message.text})
    messages.append(message.message_id)

    sent_message = await message.answer(prompt)
    messages.append(sent_message.message_id)

    await state.update_data(messages=messages)
    await state.set_state(next_state)

@dp.message(Form.address)
async def get_address(message: types.Message, state: FSMContext):
    await process_step(message, state, Form.district, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", "address")
    sent_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=get_inline_keyboard(districts, "district"))
    data = await state.get_data()
    await state.update_data(messages=data["messages"] + [sent_message.message_id])

@dp.callback_query(F.data.startswith("district:"))
async def select_district(callback: CallbackQuery, state: FSMContext):
    district = callback.data.split(":")[1]
    await state.update_data(district=district)
    
    sent_message = await callback.message.answer("üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:", reply_markup=get_inline_keyboard(property_types, "property_type"))
    
    data = await state.get_data()
    await state.update_data(messages=data["messages"] + [sent_message.message_id])

    await callback.answer()
    await state.set_state(Form.property_type)

@dp.callback_query(F.data.startswith("property_type:"))
async def select_property_type(callback: CallbackQuery, state: FSMContext):
    property_type = callback.data.split(":")[1]
    await state.update_data(property_type=property_type)

    sent_message = await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
    data = await state.get_data()
    await state.update_data(messages=data["messages"] + [sent_message.message_id])

    await callback.answer()
    await state.set_state(Form.price)

@dp.message(Form.price)
async def get_price(message: types.Message, state: FSMContext):
    await process_step(message, state, Form.floor, "ü™ú –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂/—ç—Ç–∞–∂–µ–π:", "price")

@dp.message(Form.floor)
async def get_floor(message: types.Message, state: FSMContext):
    await process_step(message, state, Form.area, "üìê –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å:", "floor")

@dp.message(Form.area)
async def get_area(message: types.Message, state: FSMContext):
    await process_step(message, state, Form.rooms, "üö™ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", "area")

@dp.message(Form.rooms)
async def get_rooms(message: types.Message, state: FSMContext):
    await process_step(message, state, Form.name, "üòé –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:", "rooms")

@dp.message(Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await process_step(message, state, Form.phone, "üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:", "name")

@dp.message(Form.phone)
async def get_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages", [])

    await state.update_data(phone=message.text, user_id=message.from_user.id, username=message.from_user.username)
    messages.append(message.message_id)

    result = (f"‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:\n\n"
              f"üìç {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"üèô {data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"üè† {data.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"üí∞ {data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ\n"
              f"ü™ú {data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"üìê {data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º¬≤\n"
              f"üö™ {data.get('rooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–æ–º–Ω.\n"
              f"üòé {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"üìû {message.text}")

    await delete_previous_messages(state, message.chat.id)
    
    sent_message = await message.answer(result, reply_markup=get_final_keyboard())
    await state.update_data(messages=[sent_message.message_id])

async def delete_previous_messages(state: FSMContext, chat_id: int):
    data = await state.get_data()
    messages_to_delete = data.get("messages", [])

    for msg_id in messages_to_delete:
        with contextlib.suppress(Exception):
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    await state.update_data(messages=[])

@dp.callback_query(F.data == "send_to_channel")
async def send_to_channel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if data.get("username"):
        user_link = f'<a href="https://t.me/{data["username"]}">üîó {data["username"]}</a>'
    else:
        user_link = f'<a href="tg://user?id={data["user_id"]}">üîó {data["user_id"]}</a>'

    post = (f"üìç <b>{data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
            f"üí∞ <b>{data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}‚ÇΩ</b>\n\n"
            f"üö™ #{data.get('rooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}–∫–æ–º–Ω\n"
            f"üè† #{data.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üèô #{data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"ü™ú {data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìê {data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}–º¬≤\n\n"
            f"üòé {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"<span class='tg-spoiler'>{user_link}</span>")

    await bot.send_message(CHANNEL_ID, post, parse_mode="HTML", disable_web_page_preview=True)
    await callback.message.delete()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())